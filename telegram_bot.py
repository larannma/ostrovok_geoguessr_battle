from telegram import ForceReply, Update, InlineKeyboardButton, KeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CallbackContext, Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler, ConversationHandler
from telegram.constants import ParseMode
import json
import os

TOKEN = "6608411270:AAHY6BEDs5rsBSR93WBN5j_lNdUMPqasbV0"
CHAT_IDS_FILE = 'chat_ids.json'

# Define states
AGREE, ASK_NAME, ASK_COMPANY, ASK_POSITION, ASK_EMAIL, CHOOSE_GAME, FAVORITE_LANGUAGE, START_QUIZ, COMMON_QUESTION_1, COMMON_QUESTION_2, COMMON_QUESTION_3, PYTHON_QUIZ, GOLANG_QUIZ = range(13)

PERSONAL_DATA = "–ï—Å–ª–∏ –≤—ã –Ω–∞–∂–∏–º–∞–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —Ç–æ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"

intro = '–ü—Ä–∏–≤–µ—Ç, –æ –≤–µ–ª–∏–∫–∏–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å –∫–æ–¥–∞. –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω, –æ–Ω –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ –∫–≤–µ—Å—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫. –û—Å—Ç—Ä–æ–≤–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–±—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∑–∞ –º–µ—Ä—á–æ–º. –ù–æ –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç –ú–µ—Ä—á–ª–µ–Ω–¥?'

final_answer = '''–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –≥–µ—Ä–æ–π! –ü–æ–¥–æ–π–¥–∏ –Ω–∞ —Å—Ç–µ–Ω–¥ –∫–æ–º–ø–∞–Ω–∏–∏ –û—Å—Ç—Ä–æ–≤–æ–∫ –∏ –∑–∞–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫. –ü–æ–∫–∞–∂–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢–µ–±–µ –µ—â–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –¥–æ–º–æ–π, —Å –º–µ—Ä—á–æ–º —ç—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–∞–º–Ω–æ–≥–æ –ø—Ä–∏—è—Ç–Ω–µ–µ)'''

common_questions = [
    ("–ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≤ –∫–∞–∫–æ–µ –ø–æ–ª—É—à–∞—Ä–∏–µ —Ç–µ–±—è –∑–∞–∫–∏–Ω–µ—Ç, –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É: –û—Ä–µ–ª - —é–∂–Ω–æ–µ –ø–æ–ª—É—à–∞—Ä–∏–µ, –†–µ—à–∫–∞ - —Å–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª—É—à–∞—Ä–∏–µ. –¢—ã –ø–æ–¥–∫–∏–Ω—É–ª –º–æ–Ω–µ—Ç–∫—É 50 —Ä–∞–∑ –∏ —Å—É–¥—å–±–∞ —è–≤–Ω–æ –Ω–∞–º–µ–∫–Ω—É–ª–∞ —Ç–µ–±–µ. –ö–∞–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –≤—ã–ø–∞–¥–∞–ª–∞ —á–∞—â–µ, –µ—Å–ª–∏ –†–µ—à–∫–∞ –≤—ã–ø–∞–ª–∞ —á–∞—â–µ –û—Ä–ª–∞ –Ω–∞ (x-5)^2.", ["–°–µ–≤–µ—Ä–Ω–æ–µ (–†–µ—à–∫–∞)", "–Æ–∂–Ω–æ–µ (–û—Ä–µ–ª)"]),
    "–¢—ã –æ–±–æ–∂–∞–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –Æ–∂–Ω–æ–µ –ø–æ–ª—É—à–∞—Ä–∏–µ –±–µ–∑ –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Ç–ø—É—Å–∫. HR —Å–æ–≤–µ—Ç—É–µ—Ç —É–∫–∞–∑–∞—Ç—å –≤ –±–ª–∞–Ω–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É. –° –¥–∞—Ç–∞–º–∏ —É —Ç–µ–±—è –Ω–µ –æ—á–µ–Ω—å, –∫—Ä–æ–º–µ —Å–≤–æ–µ–≥–æ –¥—Ä –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–Ω–∏—à—å. –†–∞–∑–≥–∞–¥–∞–π —à–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è —Å–æ —Å–¥–≤–∏–≥–æ–º 7 –∏ —É–∑–Ω–∞–π –¥–∞—Ç—É",
    ("–í—Å—ë –≥–æ—Ç–æ–≤–æ –∫ –ø–æ–ª–µ—Ç—É –≤ –ú–µ—Ä—á–ª—ç–Ω–¥! –ù–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ 1 –∞–ø—Ä–µ–ª—è, —á–µ–º–æ–¥–∞–Ω –≤ —Ä—É–∫–∞—Ö. –¢–∞–º–æ–∂–µ–Ω–Ω–∏–∫—É –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –∫–∞–∂–µ—Ç—Å—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º, —á—Ç–æ —Ç—ã –ª–µ—Ç–∏—à—å —Å –µ–¥–∏–Ω–æ—Ä–æ–≥–æ–º. –û–Ω —Ö–æ—á–µ—Ç —É–±–µ–¥–∏—Ç—å—Å—è –≤ —Ç–≤–æ–µ–π –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥—Å–æ–≤—ã–≤–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á–∫—É. –ù–∞–π–¥–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —Å—É–º–º–æ–π —á–∏—Å–µ–ª:", ["44", "17", "23", "67"])
]

python_questions = [
    ('''–ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç–µ–±—è –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏. –ó–∞–¥—Ä–µ–º–∞–≤ –≤ —Å–∞–º–æ–ª–µ—Ç–µ, —Ç—ã –≤–∏–¥–∏—à—å –≤–æ —Å–Ω–µ –±–ª–æ–∫–Ω–æ—Ç–∏–∫–∏ –∏ —Ä—É—á–∫–∏, —Å–≤–∏—Ç—à–æ—Ç—ã –∏ –∫—Ä—É–∂–∫–∏, —Ñ—É—Ç–±–æ–ª–∫–∏ –∏ –ø–∞–∫–µ—Ç—ã —Å –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏. –ú–µ—Ä—á–ª—ç–Ω–¥ –≤—Å—ë –±–ª–∏–∂–µ! –ê —Ç—ã —É–∂–µ –∏–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –±–∞–≥–∞–∂, —É–∑–Ω–∞–π –Ω–æ–º–µ—Ä –±–∞–≥–∞–∂–Ω–æ–π –ª–µ–Ω—Ç—ã.```python\nx = 0
a = 5
b = 5
if a > 0:
    if b < 0:
        x = x + 5
    elif a > 5:
        x = x + 4
    else:
        x = x + 3
else:
    x = x + 2
print(x)\n```''', ["0", "4", "3", "2"]),
    ('''–í—Å–µ –±—ã–≤—à–∏–µ –Ω–µ –∑–∞—Å–ª—É–∂–∏–≤–∞–ª–∏ —Å—Ç–æ–ª—å–∫–æ —É—Å–∏–ª–∏–π, —Å–∫–æ–ª—å–∫–æ –≤–ª–æ–∂–µ–Ω–æ –≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è. –ü–æ–ª—É—á–∞–µ—Ç—Å—è, –º–µ—Ä—á –û—Å—Ç—Ä–æ–≤–∫–∞ –ª—É—á—à–µ –ª—é–±—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –°–∫–æ—Ä–æ –≤—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç–µ—Å—å! –ú–µ—Å—Ç–Ω—ã–π –∞—ç—Ä–æ—ç–∫—Å–ø—Ä–µ—Å—Å —É–∂–µ –∂–¥–µ—Ç –Ω–∞ –ø–µ—Ä—Ä–æ–Ω–µ, –Ω–æ –Ω–∞ –∫–∞–∫–æ–º?```python\nclass A:
    def my_password(self):
        print("1234")

class B(A):
    def my_password(self):
        print("5678")

class C(A):
    def my_password(self):
        print("0000")

class D(B, C):
    pass

d = D()
d.my_password()
\n```''', ["1234", "5678", "0000", "8765"]),
    ('''–ü–æ–µ–∑–¥ –ø—Ä–∏–±—ã–ª —Ç–æ–ª—å–∫–æ –Ω–æ—á—å—é, –ø—Ä–∏—à–ª–æ—Å—å –º–µ–Ω—è—Ç—å –∫–æ–ª–µ—Å–æ –≤ –ø—É—Ç–∏.  –í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è, —Ç–≤–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—ã—Ç–∞–µ—à—å—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ wi-fi, –Ω–æ –ø–∞—Ä–æ–ª—å –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –Ω–µ–∫–æ–º—É. –£–≥–∞–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å ‚Äî –ø—Ä–æ—â–µ –ø—Ä–æ—Å—Ç–æ–≥–æ! ```python\nx = {'a': 1, 'b': 2}\nSyntaxError: not a chance\n```''', ["—Å–∫–æ–±–∫–∏", "braces", "parens", "parenthesis"]),
    ('''–¢—ã –Ω–∞ –º–µ—Å—Ç–µ. –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–∑–≥–∞–¥–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–¥, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞ –≤ –ú–µ—Ä—á–ª–µ–Ω–¥.```python\na = {'saint', 'high', 'load'}
b = {'high', 'load', 'ostrovok'}
x = list(a^b)
print(sorted(x))\n```''', ["saintostrovok", "ostrovoksaint", "highload", "sainthighload"])
]

golang_questions = [
    ('''–ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç–µ–±—è –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏. –ó–∞–¥—Ä–µ–º–∞–≤ –≤ —Å–∞–º–æ–ª–µ—Ç–µ, —Ç—ã –≤–∏–¥–∏—à—å –≤–æ —Å–Ω–µ –±–ª–æ–∫–Ω–æ—Ç–∏–∫–∏ –∏ —Ä—É—á–∫–∏, —Å–≤–∏—Ç—à–æ—Ç—ã –∏ –∫—Ä—É–∂–∫–∏, —Ñ—É—Ç–±–æ–ª–∫–∏ –∏ –ø–∞–∫–µ—Ç—ã —Å –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏. –ú–µ—Ä—á–ª—ç–Ω–¥ –≤—Å—ë –±–ª–∏–∂–µ! –ê —Ç—ã —É–∂–µ –∏–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –±–∞–≥–∞–∂, —É–∑–Ω–∞–π –Ω–æ–º–µ—Ä –±–∞–≥–∞–∂–Ω–æ–π –ª–µ–Ω—Ç—ã.```go\npackage main

import "fmt"

func fun() bool {
	return false
}

func main() {
	switch fun(); {
	case true:
		fmt.Println(3)
	case false:
		fmt.Println(5)
       default:
		fmt.Println(0)
	}
}
```''', ["11", "10", "12", "13"]),
    ('''–í—Å–µ –±—ã–≤—à–∏–µ –Ω–µ –∑–∞—Å–ª—É–∂–∏–≤–∞–ª–∏ —Å—Ç–æ–ª—å–∫–æ —É—Å–∏–ª–∏–π, —Å–∫–æ–ª—å–∫–æ –≤–ª–æ–∂–µ–Ω–æ –≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è. –ü–æ–ª—É—á–∞–µ—Ç—Å—è, –º–µ—Ä—á –û—Å—Ç—Ä–æ–≤–∫–∞ –ª—É—á—à–µ –ª—é–±—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –°–∫–æ—Ä–æ –≤—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç–µ—Å—å! –ú–µ—Å—Ç–Ω—ã–π –∞—ç—Ä–æ—ç–∫—Å–ø—Ä–µ—Å—Å —É–∂–µ –∂–¥–µ—Ç –Ω–∞ –ø–µ—Ä—Ä–æ–Ω–µ, –Ω–æ –Ω–∞ –∫–∞–∫–æ–º?```go\npackage main
import "fmt"
var password string = "1234"
func init() {
        password = "0000"
}
func init() {
        password = "5678"
}
func main() {
        fmt.Println(password)\n```''', ["1234", "0000", "5678", "8765"]),
    ('''–ü–æ–µ–∑–¥ –ø—Ä–∏–±—ã–ª —Ç–æ–ª—å–∫–æ –Ω–æ—á—å—é, –ø—Ä–∏—à–ª–æ—Å—å –º–µ–Ω—è—Ç—å –∫–æ–ª–µ—Å–æ –≤ –ø—É—Ç–∏.  –í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è, —Ç–≤–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—ã—Ç–∞–µ—à—å—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ wi-fi, –Ω–æ –ø–∞—Ä–æ–ª—å –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –Ω–µ–∫–æ–º—É. –£–≥–∞–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å ‚Äî –ø—Ä–æ—â–µ –ø—Ä–æ—Å—Ç–æ–≥–æ! ```go\nfunc main() {  
    resp, err := http.Get("https://example.org")
    defer resp.Body.Close()
    if err != nil {
        fmt.Println(err)
        return
    }

    body, err := ioutil.ReadAll(resp.Body)
    // ...
}

// panic: runtime error: invalid memory address or nil pointer dereference
\n```''', ["body", "defer", "close", "–¥–µ—Ñ–µ—Ä –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏"]),
    ('''–¢—ã –Ω–∞ –º–µ—Å—Ç–µ. –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–∑–≥–∞–¥–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–¥, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞ –≤ –ú–µ—Ä—á–ª–µ–Ω–¥.```go\npackage main

import (
"fmt"
"strings"
)

func main() {
	src := []string{"saint", "high", "load"}
	dst := []string{"ostrovok"}
	copy(dst, src)
	fmt.Println(strings.Join(dst, ""))
}
\n```''', ["sainthighload", "saint", "ostrovok", "saintostrovok"])
]

def get_question_and_options(language, question_index):
    if language == 'python':
        question, options = python_questions[question_index]
    elif language == 'golang':
        question, options = golang_questions[question_index]
    return question, options

def load_chat_ids():
    if os.path.exists(CHAT_IDS_FILE):
        with open(CHAT_IDS_FILE, 'r') as file:
            return json.load(file)
    return []

def save_chat_id(chat_id):
    chat_ids = load_chat_ids()
    if chat_id not in chat_ids:
        chat_ids.append(chat_id)
        with open(CHAT_IDS_FILE, 'w') as file:
            json.dump(chat_ids, file)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.message.chat_id
    save_chat_id(chat_id)
    await context.bot.send_message(chat_id=chat_id, text='üèñ')

    keyboard = [
        [
            InlineKeyboardButton("–Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree"),
            InlineKeyboardButton("–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="disagree"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(PERSONAL_DATA, reply_markup=reply_markup)
    
    return AGREE

async def agreement(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == "agree":
        await query.edit_message_text(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ.", reply_markup=None)
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo='./images/greetings.png',
            caption="–¢–≤–æ–µ –∏–º—è"
        )
        return ASK_NAME
    else:
        keyboard = [
            [
                InlineKeyboardButton("–Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree"),
                InlineKeyboardButton("–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="disagree"),
            ],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_reply_markup(None)
        await query.message.reply_text(PERSONAL_DATA, reply_markup=reply_markup)
        return AGREE

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    return ASK_COMPANY

async def ask_company(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['company'] = update.message.text
    await update.message.reply_text("–¢–≤–æ—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
    return ASK_POSITION

async def ask_position(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['position'] = update.message.text
    await update.message.reply_text("–¢–≤–æ–π email")
    return ASK_EMAIL

async def ask_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['email'] = update.message.text
    keyboard = [
        [InlineKeyboardButton("–ö–æ–º–∞–Ω–¥–Ω–∞—è –∏–≥—Ä–∞ –ì–µ–æ–≥–µ—Å—Å–µ—Ä", callback_data='geoguessr')],
        [InlineKeyboardButton("–ó–∞–¥–∞—á–∫–∏", callback_data='puzzles')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤ –∫–∞–∫—É—é –∏–≥—Ä—É —Ç—ã –±—É–¥–µ—à—å –∏–≥—Ä–∞—Ç—å", reply_markup=reply_markup)
    return CHOOSE_GAME

async def choose_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    game_choice = query.data

    if game_choice == 'geoguessr':
        await query.edit_message_text("–¢—ã –≤—ã–±—Ä–∞–ª –∫–æ–º–∞–Ω–¥–Ω—É—é –∏–≥—Ä—É –ì–µ–æ–≥–µ—Å—Å–µ—Ä. –¢–≤–æ–π –∫–ª—é—á AKJLWFH")
        # logic for the GeoGuessr game
        return ConversationHandler.END
    elif game_choice == 'puzzles':
        await query.edit_message_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ó–∞–¥–∞—á–∫–∏.")
        keyboard = [
            [InlineKeyboardButton("Python", callback_data='python')],
            [InlineKeyboardButton("Golang", callback_data='golang')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑", reply_markup=reply_markup)
        return FAVORITE_LANGUAGE

    return FAVORITE_LANGUAGE

async def favorite_language(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    favorite_language = query.data
    context.user_data['favorite_language'] = favorite_language
    context.user_data['question_index'] = 0  # Initialize question index

    await query.message.reply_text(intro, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="start_quiz")]]))

    return START_QUIZ

async def start_quiz(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    question, options = common_questions[0]
    keyboard = [[InlineKeyboardButton(option, callback_data=option) for option in options]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(question, reply_markup=reply_markup)

    return COMMON_QUESTION_1

async def handle_common_question_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    selected_answer = query.data

    await query.edit_message_text(text=f"Your answer: {selected_answer}. Next question:")

    await query.message.reply_text(common_questions[1])

    return COMMON_QUESTION_2

async def handle_common_question_2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answer = update.message.text

    await update.message.reply_text(f"–í–∞—à –æ—Ç–≤–µ—Ç: {answer}. –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:")

    question, options = common_questions[2]
    keyboard = [[InlineKeyboardButton(option, callback_data=option) for option in options]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(question, reply_markup=reply_markup)

    return COMMON_QUESTION_3

async def handle_common_question_3(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    selected_answer = query.data

    await query.edit_message_text(text=f"–í–∞—à –æ—Ç–≤–µ—Ç: {selected_answer}. –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:")

    favorite_language = context.user_data['favorite_language']
    context.user_data['question_index'] = 0  # Reset for specific questions

    question, options = get_question_and_options(favorite_language, 0)
    keyboard = [[InlineKeyboardButton(option, callback_data=option) for option in options]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(question, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    if favorite_language == 'python':
        return PYTHON_QUIZ
    elif favorite_language == 'golang':
        return GOLANG_QUIZ

async def handle_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    selected_answer = query.data

    favorite_language = context.user_data['favorite_language']
    question_index = context.user_data['question_index']

    context.user_data['question_index'] += 1

    if question_index + 1 < len(python_questions if favorite_language == 'python' else golang_questions):
        next_question_index = question_index + 1
        question, options = get_question_and_options(favorite_language, next_question_index)
        keyboard = [[InlineKeyboardButton(option, callback_data=option) for option in options]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text=f"–í–∞—à –æ—Ç–≤–µ—Ç: {selected_answer}. –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:", parse_mode=ParseMode.MARKDOWN)
        await query.message.reply_text(question, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

        return PYTHON_QUIZ if favorite_language == 'python' else GOLANG_QUIZ
    else:
        await query.edit_message_text(text=final_answer)
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω.')
    return ConversationHandler.END

async def send_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = ' '.join(context.args)
    chat_ids = load_chat_ids()
    for chat_id in chat_ids:
        await context.bot.send_message(chat_id=chat_id, text=message)

def main() -> None:
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            AGREE: [CallbackQueryHandler(agreement)],
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_COMPANY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_company)],
            ASK_POSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_position)],
            ASK_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_email)],
            CHOOSE_GAME: [CallbackQueryHandler(choose_game)],
            FAVORITE_LANGUAGE: [CallbackQueryHandler(favorite_language)],
            START_QUIZ: [CallbackQueryHandler(start_quiz)],
            COMMON_QUESTION_1: [CallbackQueryHandler(handle_common_question_1)],
            COMMON_QUESTION_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_common_question_2)],
            COMMON_QUESTION_3: [CallbackQueryHandler(handle_common_question_3)],
            PYTHON_QUIZ: [CallbackQueryHandler(handle_quiz)],
            GOLANG_QUIZ: [CallbackQueryHandler(handle_quiz)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("send_message", send_message))

    application.run_polling()

if __name__ == '__main__':
    main()

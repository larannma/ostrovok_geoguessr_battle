from telegram import ForceReply, Update, InlineKeyboardButton, KeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CallbackContext, Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler, ConversationHandler
from telegram.constants import ParseMode
import requests
import json
import os
import ostrovok_api as ostrovok

QUESTION_INDEX = 0

TOKEN = "6608411270:AAHY6BEDs5rsBSR93WBN5j_lNdUMPqasbV0"
CHAT_IDS_FILE = 'chat_ids.json'

# Define states
AGREE, ASK_NAME, ASK_COMPANY, ASK_POSITION, ASK_EMAIL, CHOOSE_GAME, FAVORITE_LANGUAGE, START_QUIZ, COMMON_QUESTION_1, COMMON_QUESTION_2, COMMON_QUESTION_3, PYTHON_QUIZ, GOLANG_QUIZ, PYTHON_Q3, GOLANG_Q3 = range(15)

PERSONAL_DATA = "–ï—Å–ª–∏ –≤—ã –Ω–∞–∂–∏–º–∞–µ—Ç–µ '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω', —Ç–æ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å [—É—Å–ª–æ–≤–∏—è–º–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö](https://ostrovok.ru/?sid=3cbff5a0-53dc-4453-b6c7-dbcd88870dfe)"

intro = '–û, –ø—Ä–∏–≤–µ—Ç! –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω, –æ–Ω –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ –∫–≤–µ—Å—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫. –û—Å—Ç—Ä–æ–≤–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–±—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∑–∞ –º–µ—Ä—á–æ–º. –ù–æ –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç –ú–µ—Ä—á–ª–µ–Ω–¥?'

final_answer = '''–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –≥–µ—Ä–æ–π! –ü–æ–¥–æ–π–¥–∏ –Ω–∞ —Å—Ç–µ–Ω–¥ –∫–æ–º–ø–∞–Ω–∏–∏ –û—Å—Ç—Ä–æ–≤–æ–∫ –∏ –∑–∞–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫. –ü–æ–∫–∞–∂–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢–µ–±–µ –µ—â–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –¥–æ–º–æ–π, —Å –º–µ—Ä—á–æ–º —ç—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–∞–º–Ω–æ–≥–æ –ø—Ä–∏—è—Ç–Ω–µ–µ)'''

common_questions = [
    ("–ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≤ –∫–∞–∫–æ–µ –ø–æ–ª—É—à–∞—Ä–∏–µ —Ç–µ–±—è –∑–∞–∫–∏–Ω–µ—Ç, –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É: –û—Ä–µ–ª - —é–∂–Ω–æ–µ –ø–æ–ª—É—à–∞—Ä–∏–µ, –†–µ—à–∫–∞ - —Å–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª—É—à–∞—Ä–∏–µ. –¢—ã –ø–æ–¥–∫–∏–Ω—É–ª –º–æ–Ω–µ—Ç–∫—É 50 —Ä–∞–∑ –∏ —Å—É–¥—å–±–∞ —è–≤–Ω–æ –Ω–∞–º–µ–∫–Ω—É–ª–∞ —Ç–µ–±–µ. –ö–∞–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –≤—ã–ø–∞–¥–∞–ª–∞ —á–∞—â–µ, –µ—Å–ª–∏ –†–µ—à–∫–∞ –≤—ã–ø–∞–ª–∞ —á–∞—â–µ –û—Ä–ª–∞ –Ω–∞ (x-5)^2.", ["–°–µ–≤–µ—Ä–Ω–æ–µ (–†–µ—à–∫–∞)", "–Æ–∂–Ω–æ–µ (–û—Ä–µ–ª)"], './images/–ó–∞–¥–∞—á–∞1.jpg'),
    ("–¢—ã –æ–±–æ–∂–∞–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –Æ–∂–Ω–æ–µ –ø–æ–ª—É—à–∞—Ä–∏–µ –±–µ–∑ –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Ç–ø—É—Å–∫. HR —Å–æ–≤–µ—Ç—É–µ—Ç —É–∫–∞–∑–∞—Ç—å –≤ –±–ª–∞–Ω–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É. –° –¥–∞—Ç–∞–º–∏ —É —Ç–µ–±—è –Ω–µ –æ—á–µ–Ω—å, –∫—Ä–æ–º–µ —Å–≤–æ–µ–≥–æ –¥—Ä –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–Ω–∏—à—å. –†–∞–∑–≥–∞–¥–∞–π —à–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è —Å–æ —Å–¥–≤–∏–≥–æ–º 7 –∏ —É–∑–Ω–∞–π –¥–∞—Ç—É\n\n–®–∏—Ñ—Ä: `mpyzavmhwyps`",["01.04", "05.08", "21.01", "11.11"],'./images/–ó–∞–¥–∞—á–∞2.jpg'),
    ("–í—Å—ë –≥–æ—Ç–æ–≤–æ –∫ –ø–æ–ª–µ—Ç—É –≤ –ú–µ—Ä—á–ª—ç–Ω–¥! –ù–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ 1 –∞–ø—Ä–µ–ª—è, —á–µ–º–æ–¥–∞–Ω –≤ —Ä—É–∫–∞—Ö. –¢–∞–º–æ–∂–µ–Ω–Ω–∏–∫—É –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –∫–∞–∂–µ—Ç—Å—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º, —á—Ç–æ —Ç—ã –ª–µ—Ç–∏—à—å —Å –µ–¥–∏–Ω–æ—Ä–æ–≥–æ–º. –û–Ω —Ö–æ—á–µ—Ç —É–±–µ–¥–∏—Ç—å—Å—è –≤ —Ç–≤–æ–µ–π –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥—Å–æ–≤—ã–≤–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á–∫—É. –ù–∞—á–∏–Ω–∞—è —Å –≤–µ—Ä—à–∏–Ω—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞, –¥–≤–∏–≥–∞–π—Å—è –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –≤–Ω–∏–∑ –ø–æ —Å–º–µ–∂–Ω—ã–º —á–∏—Å–ª–∞–º. –ù–∞–π–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —á–∏—Å–µ–ª", ["44", "17", "23", "67"], './images/–ó–∞–¥–∞—á–∞3.jpg')
]

common_answers = [
    "–Æ–∂–Ω–æ–µ (–û—Ä–µ–ª)",
    "01.04",
    "23"
]

python_questions = [
    ('''–ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç–µ–±—è –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏. –ó–∞–¥—Ä–µ–º–∞–≤ –≤ —Å–∞–º–æ–ª–µ—Ç–µ, —Ç—ã –≤–∏–¥–∏—à—å –≤–æ —Å–Ω–µ –±–ª–æ–∫–Ω–æ—Ç–∏–∫–∏ –∏ —Ä—É—á–∫–∏, —Å–≤–∏—Ç—à–æ—Ç—ã –∏ –∫—Ä—É–∂–∫–∏, —Ñ—É—Ç–±–æ–ª–∫–∏ –∏ –ø–∞–∫–µ—Ç—ã —Å –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏. –ú–µ—Ä—á–ª—ç–Ω–¥ –≤—Å—ë –±–ª–∏–∂–µ! –ê —Ç—ã —É–∂–µ –∏–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –±–∞–≥–∞–∂, —É–∑–Ω–∞–π –Ω–æ–º–µ—Ä –±–∞–≥–∞–∂–Ω–æ–π –ª–µ–Ω—Ç—ã.''', ["0", "4", "3", "2"], './images/–ó–∞–¥–∞—á–∞4_Python.jpg'),
    ('''–í—Å–µ –±—ã–≤—à–∏–µ –Ω–µ –∑–∞—Å–ª—É–∂–∏–≤–∞–ª–∏ —Å—Ç–æ–ª—å–∫–æ —É—Å–∏–ª–∏–π, —Å–∫–æ–ª—å–∫–æ –≤–ª–æ–∂–µ–Ω–æ –≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è. –ü–æ–ª—É—á–∞–µ—Ç—Å—è, –º–µ—Ä—á –û—Å—Ç—Ä–æ–≤–∫–∞ –ª—É—á—à–µ –ª—é–±—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –°–∫–æ—Ä–æ –≤—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç–µ—Å—å! –ú–µ—Å—Ç–Ω—ã–π –∞—ç—Ä–æ—ç–∫—Å–ø—Ä–µ—Å—Å —É–∂–µ –∂–¥–µ—Ç –Ω–∞ –ø–µ—Ä—Ä–æ–Ω–µ, –Ω–æ –Ω–∞ –∫–∞–∫–æ–º?''', ["1234", "5678", "0000", "8765"], './images/–ó–∞–¥–∞—á–∞5_Python.jpg'),
    ('''–ù–∞ –º–æ–Ω–∏—Ç–æ—Ä–µ, –≥–¥–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å QR-–∫–æ–¥ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Wi-Fi –ø–æ—è–≤–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞. –†—è–¥–æ–º —Å—Ç–æ—è—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ —á–µ—à—É—Ç –∑–∞—Ç—ã–ª–∫–∏. –ü–æ–º–æ–≥–∏ –∏–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –∑–∞ –æ—à–∏–±–∫–∞. (–æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –æ —á—ë–º —ç—Ç–∞ –æ—à–∏–±–∫–∞)''', ["—Å–∫–æ–±–∫–∏", "braces", "parens", "parenthesis"], './images/–ó–∞–¥–∞—á–∞6_Python.jpg'),
    ('''–¢—ã –Ω–∞ –º–µ—Å—Ç–µ. –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–∑–≥–∞–¥–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–¥, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞ –≤ –ú–µ—Ä—á–ª–µ–Ω–¥.''', ["saintostrovok", "ostrovoksaint", "highload", "sainthighload"], './images/–ó–∞–¥–∞—á–∞7_Python.jpg')
]

python_answers = [
    "3",
    "5678",
    "—Å–∫–æ–±–∫–∏, —Å–∫–æ–±–æ—á–∫–∏, brac, braces, parens, parenthesis, brackets",
    "ostrovoksaint"
]

go_answers = [
    "3",
    "5678",
    "body, defer, close, –¥–µ—Ñ–µ—Ä –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏",
    "sainthighload"
]

golang_questions = [
    ('''–ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç–µ–±—è –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏. –ó–∞–¥—Ä–µ–º–∞–≤ –≤ —Å–∞–º–æ–ª–µ—Ç–µ, —Ç—ã –≤–∏–¥–∏—à—å –≤–æ —Å–Ω–µ –±–ª–æ–∫–Ω–æ—Ç–∏–∫–∏ –∏ —Ä—É—á–∫–∏, —Å–≤–∏—Ç—à–æ—Ç—ã –∏ –∫—Ä—É–∂–∫–∏, —Ñ—É—Ç–±–æ–ª–∫–∏ –∏ –ø–∞–∫–µ—Ç—ã —Å –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏. –ú–µ—Ä—á–ª—ç–Ω–¥ –≤—Å—ë –±–ª–∏–∂–µ! –ê —Ç—ã —É–∂–µ –∏–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –±–∞–≥–∞–∂, —É–∑–Ω–∞–π –Ω–æ–º–µ—Ä –±–∞–≥–∞–∂–Ω–æ–π –ª–µ–Ω—Ç—ã.''', ["3", "5", "0", "1"], './images/–ó–∞–¥–∞—á–∞4_Go.jpg'),
    ('''–í—Å–µ –±—ã–≤—à–∏–µ –Ω–µ –∑–∞—Å–ª—É–∂–∏–≤–∞–ª–∏ —Å—Ç–æ–ª—å–∫–æ —É—Å–∏–ª–∏–π, —Å–∫–æ–ª—å–∫–æ –≤–ª–æ–∂–µ–Ω–æ –≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è. –ü–æ–ª—É—á–∞–µ—Ç—Å—è, –º–µ—Ä—á –û—Å—Ç—Ä–æ–≤–∫–∞ –ª—É—á—à–µ –ª—é–±—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –°–∫–æ—Ä–æ –≤—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç–µ—Å—å! –ú–µ—Å—Ç–Ω—ã–π –∞—ç—Ä–æ—ç–∫—Å–ø—Ä–µ—Å—Å —É–∂–µ –∂–¥–µ—Ç –Ω–∞ –ø–µ—Ä—Ä–æ–Ω–µ, –Ω–æ –Ω–∞ –∫–∞–∫–æ–º?''', ["1234", "0000", "5678", "8765"], './images/–ó–∞–¥–∞—á–∞5_Go.jpg'),
    ('''–ù–∞ –º–æ–Ω–∏—Ç–æ—Ä–µ, –≥–¥–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å QR-–∫–æ–¥ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Wi-Fi –ø–æ—è–≤–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞. –†—è–¥–æ–º —Å—Ç–æ—è—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ —á–µ—à—É—Ç –∑–∞—Ç—ã–ª–∫–∏. –ü–æ–º–æ–≥–∏ –∏–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –∑–∞ –æ—à–∏–±–∫–∞. (–æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –æ —á—ë–º —ç—Ç–∞ –æ—à–∏–±–∫–∞)''', ["body", "defer", "close", "–¥–µ—Ñ–µ—Ä –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏"], './images/–ó–∞–¥–∞—á–∞6_Go.jpg'),
    ('''–¢—ã –Ω–∞ –º–µ—Å—Ç–µ. –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–∑–≥–∞–¥–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–¥, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞ –≤ –ú–µ—Ä—á–ª–µ–Ω–¥.''', ["sainthighload", "saint", "ostrovok", "saintostrovok"], './images/–ó–∞–¥–∞—á–∞7_Go.jpg')
]

def get_question_and_options(language, question_index):
    if language == 'python':
        question, options, image = python_questions[question_index]
    elif language == 'golang':
        question, options, image = golang_questions[question_index]
    return question, options, image

def load_chat_ids():
    if os.path.exists(CHAT_IDS_FILE):
        with open(CHAT_IDS_FILE, 'r') as file:
            return json.load(file)
    return []

def save_chat_id(chat_id):
    chat_ids = load_chat_ids()
    if chat_id not in chat_ids:
        chat_ids.append(chat_id)
        with open(CHAT_IDS_FILE, 'w') as file:
            json.dump(chat_ids, file)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.message.chat_id
    save_chat_id(chat_id)
    await context.bot.send_message(chat_id=chat_id, text='üèñ')

    keyboard = [
        [
            InlineKeyboardButton("–Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree"),
            InlineKeyboardButton("–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="disagree"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(PERSONAL_DATA, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    return AGREE

async def agreement(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user_id = update.effective_user.id
    username = update.effective_user.username
    chat_id = query.message.chat.id
    await query.answer()
    await update.callback_query.edit_message_reply_markup(None)
    if query.data == "agree":
        try:
            res = ostrovok.create_user(user_id, username, chat_id)
            print(res)
            print('|  User has been created   |')
        except:
            print("Error creating a user")
        await context.bot.send_message(chat_id, text='‚úàÔ∏è')
        await context.bot.send_photo(
            chat_id,
            photo='./images/–ü—Ä–∏–≤–µ—Ç.jpg',
            caption="–¢–≤–æ–µ –∏–º—è"
        )
        return ASK_NAME
    else:
        keyboard = [
        [
            InlineKeyboardButton("–Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree"),
            InlineKeyboardButton("–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="disagree"),
            ],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(PERSONAL_DATA, reply_markup=reply_markup)
        return AGREE

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    user_id = update.effective_user.id
    try:
        ostrovok.set_name(user_id, context.user_data['name'])
    except:
        print("Error setting user's name")
    await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    return ASK_COMPANY

async def ask_company(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['company'] = update.message.text
    query = update.callback_query
    # await query.answer()
    # chat_id = query.message.chat.id
    user_id = update.effective_user.id
    try:
        # ostrovok.set_company(chat_id, context.user_data['company'])
        pass
    except:
        print("Error setting user's company")
    await update.message.reply_text("–¢–≤–æ—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
    return ASK_POSITION

async def ask_position(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['position'] = update.message.text

    user_id = update.effective_user.id
    try:
        ostrovok.set_job_title(user_id, context.user_data['position'])
    except:
        print("Error setting user's job title")
    await update.message.reply_text("–¢–≤–æ–π email")
    return ASK_EMAIL

async def ask_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['email'] = update.message.text
    user_id = update.effective_user.id
    try:
        ostrovok.set_email(user_id, context.user_data['email'])
    except:
        print("Error setting user's email")

    keyboard = [
        [InlineKeyboardButton("Python", callback_data='python')],
        [InlineKeyboardButton("Go", callback_data='golang')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–æ–π—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è", reply_markup=reply_markup)
    return FAVORITE_LANGUAGE
    # keyboard = [
    #     [InlineKeyboardButton("–ö–æ–º–∞–Ω–¥–Ω–∞—è –∏–≥—Ä–∞ –ì–µ–æ–≥–µ—Å—Å–µ—Ä", callback_data='geoguessr')],
    #     [InlineKeyboardButton("–ó–∞–¥–∞—á–∫–∏", callback_data='puzzles')]
    # ]
    # reply_markup = InlineKeyboardMarkup(keyboard)
    # await update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤ –∫–∞–∫—É—é –∏–≥—Ä—É —Ç—ã –±—É–¥–µ—à—å –∏–≥—Ä–∞—Ç—å", reply_markup=reply_markup)
    # return CHOOSE_GAME

async def choose_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    game_choice = query.data
    chat_id = query.message.chat.id
    user_id = update.effective_user.id
    code = ''
    
    if game_choice == 'geoguessr':
        try:
            responce = requests.get(f"http://heyyouhere.space:1566/get_code?id={user_id}")
            ans = responce.json()
            code = ans['code']
            await query.edit_message_text(f"–¢–≤–æ–π –∫–ª—é—á `{code}`", parse_mode=ParseMode.MARKDOWN)
        except:
            print("error in creating geoguessr code")
        # logic for the GeoGuessr game
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑", callback_data='puzzles')],
        ]
        # await update.callback_query.edit_message_reply_markup(None)
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç—É—Ä–Ω–∏—Ä –ø–æ geoguessr, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑", reply_markup=reply_markup)

        return CHOOSE_GAME
    elif game_choice == 'puzzles':
        await query.edit_message_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ó–∞–¥–∞—á–∫–∏.")
        context.user_data['question_index'] = 0  # Initialize question index
        # await update.callback_query.edit_message_reply_markup(None)
        await query.message.reply_text(intro, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="start_quiz")]]))

        return START_QUIZ
        # keyboard = [
        #     [InlineKeyboardButton("Python", callback_data='python')],
        #     [InlineKeyboardButton("Go", callback_data='golang')]
        # ]
        # reply_markup = InlineKeyboardMarkup(keyboard)
        # await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑", reply_markup=reply_markup)
        # return FAVORITE_LANGUAGE

    return FAVORITE_LANGUAGE

async def favorite_language(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    favorite_language = query.data
    context.user_data['favorite_language'] = favorite_language
    await update.callback_query.edit_message_reply_markup(None)
    user_id = update.effective_user.id
    try:
        ostrovok.set_favorite_language(user_id, favorite_language)
    except:
        print("Error setting user's favorite language")
    keyboard = [
        [InlineKeyboardButton("–ö–æ–º–∞–Ω–¥–Ω–∞—è –∏–≥—Ä–∞ –ì–µ–æ–≥–µ—Å—Å–µ—Ä", callback_data='geoguessr')],
        [InlineKeyboardButton("–ó–∞–¥–∞—á–∫–∏", callback_data='puzzles')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏ –≤ –∫–∞–∫—É—é –∏–≥—Ä—É —Ç—ã –±—É–¥–µ—à—å –∏–≥—Ä–∞—Ç—å", reply_markup=reply_markup)
    return CHOOSE_GAME
    # context.user_data['question_index'] = 0  # Initialize question index
    # await update.callback_query.edit_message_reply_markup(None)
    # await query.message.reply_text(intro, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="start_quiz")]]))

    # return START_QUIZ

async def start_quiz(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    chat_id = query.message.chat.id
    await query.answer()
    await update.callback_query.edit_message_reply_markup(None)
    question, options, image = common_questions[0]
    keyboard = [[InlineKeyboardButton(option, callback_data=option) for option in options]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_photo(
            chat_id,
            photo=image,
            caption=question,
            reply_markup=reply_markup
        )

    return COMMON_QUESTION_1

async def handle_common_question_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    chat_id = query.message.chat.id
    await query.answer()
    selected_answer = query.data
    user_id = update.effective_user.id
    # print("ANSWER", selected_answer)
    if selected_answer == common_answers[0]:
        try:
            ostrovok.add_points(user_id, 1)
        except:
            print('there was an error adding the point')
        # print("Correct")
        # add point to the db
    else:
        pass
        # print("Incorrect")

    question, options, image = common_questions[1]
    await update.callback_query.edit_message_reply_markup(None)
    await query.message.reply_text(f'{selected_answer}. –û—Ç–≤–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω, –ø–æ–µ—Ö–∞–ª–∏ –¥–∞–ª—å—à–µ!')

    keyboard = [[InlineKeyboardButton(option, callback_data=option) for option in options]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_photo(
            chat_id,
            photo=image,
            caption=question,
            reply_markup=reply_markup
        )

    return COMMON_QUESTION_2

async def handle_common_question_2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    chat_id = query.message.chat.id
    await query.answer()
    selected_answer = query.data
    await update.callback_query.edit_message_reply_markup(None)
    user_id = update.effective_user.id
    if selected_answer == common_answers[1]:
        try:
            ostrovok.add_points(user_id, 1)
        except:
            print('there was an error adding the point')
        # print("Correct")
        # add point to the db
    else:
        pass
        # print("Incorrect")

    # print("ANSWER", selected_answer)
    question, options, image = common_questions[2]
    keyboard = [[InlineKeyboardButton(option, callback_data=option) for option in options]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_photo(
            chat_id=chat_id,
            photo=image,
            caption=question,
            reply_markup=reply_markup
        )

    return COMMON_QUESTION_3

async def handle_common_question_3(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global QUESTION_INDEX
    query = update.callback_query
    chat_id = query.message.chat.id
    await query.answer()
    selected_answer = query.data
    user_id = update.effective_user.id
    # print("ANSWER", selected_answer)
    if selected_answer == common_answers[2]:
        try:
            ostrovok.add_points(user_id, 1)
        except:
            print('there was an error adding the point')
        # print("Correct")
        # add point to the db
    else:
        pass
        # print("Incorrect")
    await query.message.reply_text(f'{selected_answer}. –û—Ç–≤–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω, –ø–æ–µ—Ö–∞–ª–∏ –¥–∞–ª—å—à–µ!')
    await update.callback_query.edit_message_reply_markup(None)
    favorite_language = context.user_data['favorite_language']
    context.user_data['question_index'] = 0
    QUESTION_INDEX = 0

    question, options, image = get_question_and_options(favorite_language, 0)
    keyboard = [[InlineKeyboardButton(option, callback_data=option) for option in options]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_photo(
                chat_id=chat_id,
                photo=image,
                caption=question,
                reply_markup=reply_markup
            )

    # await query.message.reply_text(question, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    if favorite_language == 'python':
        return PYTHON_QUIZ
    elif favorite_language == 'golang':
        return GOLANG_QUIZ

async def handle_python_q3(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answer = update.message.text.lower().strip()
    correct_answers = ["—Å–∫–æ–±–∫–∏", "—Å–∫–æ–±–æ—á–∫–∏", "brac", "braces", "parens", "parenthesis", "brackets"]
    # print("ANSWER", answer)
    user_id = update.effective_user.id
    if any(correct in answer for correct in correct_answers):
        try:
            ostrovok.add_points(user_id, 1)
        except:
            print('there was an error adding the point')
        # print("Correct")
    else:
        pass
        # print("Incorrect")
    return await continue_python_quiz(update, context)

async def handle_golang_q3(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answer = update.message.text.lower().strip()
    correct_answers = ["body", "defer", "close", "–¥–µ—Ñ–µ—Ä –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏"]
    # print("ANSWER", answer)
    if any(correct in answer for correct in correct_answers):
        user_id = update.effective_user.id

        try:
            ostrovok.add_points(user_id, 1)
        except:
            print('there was an error adding the point')
        # print("Correct")
    else:
        pass
        # print("Incorrect")
    return await continue_golang_quiz(update, context)

async def continue_python_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global QUESTION_INDEX
    chat_id = update.message.chat.id
    # question_index = context.user_data['question_index']
    QUESTION_INDEX += 1
    next_question_index = QUESTION_INDEX

    question, options, image = get_question_and_options('python', next_question_index)
    keyboard = [[InlineKeyboardButton(option, callback_data=option)] for option in options]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_photo(
        chat_id,
        photo=image,
        caption=question,
        reply_markup=reply_markup
    )

    return PYTHON_QUIZ

async def continue_golang_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global QUESTION_INDEX
    chat_id = update.message.chat.id
    # question_index = context.user_data['question_index']
    QUESTION_INDEX += 1
    next_question_index = QUESTION_INDEX

    question, options, image = get_question_and_options('golang', next_question_index)
    keyboard = [[InlineKeyboardButton(option, callback_data=option)] for option in options]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_photo(
        chat_id,
        photo=image,
        caption=question,
        reply_markup=reply_markup
    )

    return GOLANG_QUIZ


async def handle_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global QUESTION_INDEX
    query = update.callback_query
    chat_id = update.callback_query.message.chat.id
    await query.answer()
    await update.callback_query.edit_message_reply_markup(None)
    user_id = update.effective_user.id
    favorite_language = context.user_data['favorite_language']
    # question_index = context.user_data['question_index']
    selected_answer = query.data

    # Process the current question answer here if needed
    if favorite_language == 'python':
        if QUESTION_INDEX == 0 and selected_answer == python_answers[0]:  
            try:
                ostrovok.add_points(user_id, 1)
            except:
                print('there was an error adding the point')
        if QUESTION_INDEX == 1 and selected_answer == python_answers[1]:
  
            try:
                ostrovok.add_points(user_id, 1)
            except:
                print('there was an error adding the point')
        if QUESTION_INDEX == 3 and selected_answer == python_answers[3]:
            try:
                ostrovok.add_points(user_id, 1)
            except:
                print('there was an error adding the point')
    elif favorite_language == 'golang':
        if QUESTION_INDEX == 0 and selected_answer == go_answers[0]:
            try:
                ostrovok.add_points(user_id, 1)
            except:
                print('there was an error adding the point')
        if QUESTION_INDEX == 1 and selected_answer == go_answers[1]:
            try:
                ostrovok.add_points(user_id, 1)
            except:
                print('there was an error adding the point')
        if QUESTION_INDEX == 3 and selected_answer == go_answers[3]:
            try:
                ostrovok.add_points(user_id, 1)
            except:
                print('there was an error adding the point')
    print("ANSWER",selected_answer, QUESTION_INDEX)
    # sent point and add if correct on server
    if QUESTION_INDEX + 1 < len(python_questions if favorite_language == 'python' else golang_questions):
        next_question_index = QUESTION_INDEX + 1

        # Handle the third question differently
        if next_question_index == 2:
            question, options, image = get_question_and_options(favorite_language, next_question_index)
            await context.bot.send_photo(chat_id, photo=image, caption=question)
            QUESTION_INDEX += 1
            return PYTHON_Q3 if favorite_language == 'python' else GOLANG_Q3
        else:
            question, options, image = get_question_and_options(favorite_language, next_question_index)
            keyboard = [[InlineKeyboardButton(option, callback_data=option)] for option in options]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_photo(
                chat_id,
                photo=image,
                caption=question,
                reply_markup=reply_markup
            )

            QUESTION_INDEX += 1

            return PYTHON_QUIZ if favorite_language == 'python' else GOLANG_QUIZ
    else:
        keyboard = [
            [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", callback_data='get_code')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=chat_id, text="–ö–æ–Ω–µ—Ü –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        await context.bot.send_message(chat_id=chat_id, text="–ï—Å–ª–∏ —Ç—ã –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è–ª —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏ –≤ –∏–≥—Ä–µ geoguessr –∏–ª–∏ –∑–∞–±—ã–ª –∫–æ–¥", reply_markup=reply_markup)
        return ConversationHandler.END


async def get_geoguessr_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    chat_id = update.callback_query.message.chat.id
    selected_answer = query.data
    await query.answer()
    user_id = update.effective_user.id
    code = ''

    if selected_answer == 'get_code':
        try:
            responce = requests.get(f"http://heyyouhere.space:1566/get_code?id={user_id}")
            ans = responce.json()
            code = ans['code']
            await query.edit_message_text(f"–¢–≤–æ–π –∫–ª—é—á `{code}`", parse_mode=ParseMode.MARKDOWN)
        except:
            print("error in creating geoguessr code")
    # return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω.')
    return ConversationHandler.END

async def send_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = ' '.join(context.args)
    chat_ids = load_chat_ids()
    for chat_id in chat_ids:
        await context.bot.send_message(chat_id=chat_id, text=message)

def main() -> None:
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            AGREE: [CallbackQueryHandler(agreement)],
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_COMPANY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_company)],
            ASK_POSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_position)],
            ASK_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_email)],
            FAVORITE_LANGUAGE: [CallbackQueryHandler(favorite_language)],
            CHOOSE_GAME: [CallbackQueryHandler(choose_game)],
            START_QUIZ: [CallbackQueryHandler(start_quiz)],
            COMMON_QUESTION_1: [CallbackQueryHandler(handle_common_question_1)],
            COMMON_QUESTION_2: [CallbackQueryHandler(handle_common_question_2)],
            COMMON_QUESTION_3: [CallbackQueryHandler(handle_common_question_3)],
            PYTHON_QUIZ: [CallbackQueryHandler(handle_quiz)],
            GOLANG_QUIZ: [CallbackQueryHandler(handle_quiz)],
            PYTHON_Q3: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_python_q3)],
            GOLANG_Q3: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_golang_q3)],
        },
        fallbacks=[CallbackQueryHandler(get_geoguessr_code)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("send_message", send_message))
    application.add_handler(CallbackQueryHandler(get_geoguessr_code))

    application.run_polling()

if __name__ == '__main__':
    main()
